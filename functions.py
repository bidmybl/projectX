#TODO: 
# –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü - complete‚úÖ
# –î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç - complete‚úÖ
# –í—ã—á–∏—Ç–∞–Ω–∏–µ - complete‚úÖ
# –°–ª–æ–∂–µ–Ω–∏–µ - in process‚ùå
# –°–æ—é–∑–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ - complete‚úÖ
# –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ - in process‚ùå
# –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–æ - complete‚úÖ
# –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ª—é–±–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ - in process‚ùå
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω—É–ª—å –º–∞—Ç—Ä–∏—Ü—ã - in process‚ùå
# –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ - complete‚úÖ


def input_matrix_square() -> list[list[float]]:
    """–í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã n-–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–æ–¥–∞"""    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä—è–¥–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
    while True:
        try:
            n = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã: "))
            if n <= 0:
                print("–ü–æ—Ä—è–¥–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                continue
            break
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã!")
    
    print(f"–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã {n}x{n} –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:")
    matrix = []
    
    for i in range(n):
        while True:
            try:
                input_line = input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ").strip()
                if not input_line:
                    print("–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                    continue
                    
                elements = input_line.split()
                if len(elements) != n:
                    print(f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è {n} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ {len(elements)}")
                    continue
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —á–∏—Å–ª–∞
                row = []
                for j, element in enumerate(elements):
                    try:
                        num = float(element)
                        row.append(num)
                    except ValueError:
                        print(f"–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç '{element}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {j+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!")
                        raise ValueError
                
                matrix.append(row)
                break
                
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏!")
            except KeyboardInterrupt:
                print("\n–í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    return matrix


def input_matrix_rectangular() -> list[list[float]]:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–≤–æ–¥–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    # –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    def get_positive_integer(prompt):
        while True:
            try:
                value = int(input(prompt))
                if value > 0:
                    return value
                print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    
    rows = get_positive_integer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ")
    cols = get_positive_integer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: ")
    
    print(f"\n–í–≤–µ–¥–∏—Ç–µ {rows} —Å—Ç—Ä–æ–∫ –ø–æ {cols} —á–∏—Å–µ–ª:")
    matrix = []
    
    for i in range(rows):
        while True:
            try:
                input_line = input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ").strip()
                if not input_line:
                    print("–°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                    continue
                    
                elements = input_line.split()
                if len(elements) != cols:
                    print(f"–ù—É–∂–Ω–æ {cols} —á–∏—Å–µ–ª, –ø–æ–ª—É—á–µ–Ω–æ {len(elements)}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —á–∏—Å–ª–∞
                row = []
                for element in elements:
                    try:
                        row.append(float(element))
                    except ValueError:
                        print(f"–≠–ª–µ–º–µ–Ω—Ç '{element}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!")
                        raise ValueError
                
                matrix.append(row)
                break
                
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞!")
            except KeyboardInterrupt:
                print("\n–í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω")
                return None
    
    return matrix


def matrix_det(matrix: list[list[float]]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã –ª—é–±–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã: matrix - –º–∞—Ç—Ä–∏—Ü–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: float - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è
    n = len(matrix)
    for row in matrix:
        if len(row) != n:
            raise ValueError("–î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ãüò¢")
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –º–∞—Ç—Ä–∏—Ü –º–∞–ª–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    if n == 1:
        return matrix[0][0]
    
    if n == 2:
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
    
    if n == 3:
        # –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞(–°–∞—Ä—Ä—é—Å–∞) –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã 3x3
        return (matrix[0][0] * matrix[1][1] * matrix[2][2] +
                matrix[0][1] * matrix[1][2] * matrix[2][0] +
                matrix[0][2] * matrix[1][0] * matrix[2][1] -
                matrix[0][2] * matrix[1][1] * matrix[2][0] -
                matrix[0][1] * matrix[1][0] * matrix[2][2] -
                matrix[0][0] * matrix[1][2] * matrix[2][1])
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç—Ä–∏—Ü –±–æ–ª—å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    determinant = 0
    # –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    for j in range(n):
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–æ—Ä - –º–∞—Ç—Ä–∏—Ü–∞ –±–µ–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ j-–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        minor = []
        for i in range(1, n):
            row = []
            for k in range(n):
                if k != j:
                    row.append(matrix[i][k])
            minor.append(row)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∏–Ω–æ—Ä–∞
        minor_det = matrix_det(minor)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—É–º–º–µ —Å —É—á–µ—Ç–æ–º –∑–Ω–∞–∫–∞
        sign = 1 if j % 2 == 0 else -1
        determinant += sign * matrix[0][j] * minor_det
    
    return determinant


def matrix_subtraction(matrix1: list[list[float]], matrix2: list[list[float]]) -> list[list[float]]:
    """–í—ã—á–∏—Ç–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã: matrix1, matrix2 - –º–∞—Ç—Ä–∏—Ü—ã(–ø–µ—Ä–≤–∞—è –º–∏–Ω—É—Å –≤—Ç–æ—Ä–∞—è)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –º–∞—Ç—Ä–∏—Ü—É-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è
    """
    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
        raise ValueError("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    
    return [[matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))] 
            for i in range(len(matrix1))]


def matrix_multiply_by_scalar(matrix:list[list[float]]) -> list[list[float]]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É, —É–º–Ω–æ–∂–µ–Ω–Ω—É—é –Ω–∞ —ç—Ç–æ —á–∏—Å–ª–æ
    
    Args:
        matrix: –∏—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    
    Returns:
        result: —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    """
    while True:
        try:
            scalar_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã: ").strip()
            if not scalar_input:
                print("–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
                
            scalar = float(scalar_input)
            break
        except TypeError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            
    result = []
    for row in matrix:
        new_row = [element * scalar for element in row]
        result.append(new_row)
    
    return result

def matrix_algebraic_complement(matrix: list[list[float]]) -> list[list[float]]:
    """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ—é–∑–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã(–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π)
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã: matrix - –º–∞—Ç—Ä–∏—Ü–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ —Å–æ—é–∑–Ω–∞—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–æ—é–∑–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    """
    
    n = len(matrix)
    if any(len(row) != n for row in matrix):
        raise ValueError("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")
    
    def minor_det(mat, excl_row, excl_col):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∏–Ω–æ—Ä–∞"""
        minor = [row[:excl_col] + row[excl_col+1:] 
                for i, row in enumerate(mat) if i != excl_row]
        return matrix_det(minor)
    
    print("–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã:", end='')
    return [[(1 if (i+j)%2==0 else -1) * minor_det(matrix, i, j) 
            for j in range(n)] for i in range(n)]


def print_matrix(matrix:list[list[float]], title="–ú–∞—Ç—Ä–∏—Ü–∞") -> None:
    """
    –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã: matrix: –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞, title: –∑–∞–≥–æ–ª–æ–≤–æ–∫
    """
    if not matrix:
        print("–ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Å—Ç–∞")
        return
    
    print(f"\n{title} {len(matrix)}x{len(matrix[0])}:")
    print("‚îÄ" * (len(matrix[0]) * 10))
    
    for row in matrix:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        formatted_row = [f"{x:8.3f}" if isinstance(x, float) else f"{x:8}" for x in row]
        print(" ".join(formatted_row))
    
    print("‚îÄ" * (len(matrix[0]) * 10))

# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã:

# print(f"Determinant = {matrix_det(input_matrix())}")
# print(f"Determinant = {print_matrix(matrix_subtraction(input_matrix_square(), input_matrix_square()))}")
# print(print_matrix(algebraic_complement_matrix_compact(input_matrix_square())))
# print(print_matrix(input_matrix_rectangular()))
# print_matrix(matrix_multiply_by_scalar(input_matrix_rectangular()))